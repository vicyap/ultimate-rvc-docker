name: Build on PyPI Release

on:
  schedule:
  - cron: 0 * * * *      # Check hourly
  workflow_dispatch:
    inputs:
      force_build:
        description: Force build even if version unchanged
        type: boolean
        default: false

jobs:
  check-and-build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Cache version tracking
      uses: actions/cache@v4
      id: cache
      with:
        path: .pypi-version
        key: pypi-ultimate-rvc-${{ github.run_id }}
        restore-keys: pypi-ultimate-rvc-

    - name: Check versions
      id: version-check
      run: |
        # Get cached version
        CACHED_VERSION="none"
        [ -f .pypi-version ] && CACHED_VERSION=$(cat .pypi-version)

        # Get latest from PyPI
        LATEST_VERSION=$(curl -s https://pypi.org/pypi/ultimate-rvc/json | jq -r '.info.version')

        # Save for next run
        echo "$LATEST_VERSION" > .pypi-version

        # Set outputs
        echo "cached=$CACHED_VERSION" >> $GITHUB_OUTPUT
        echo "latest=$LATEST_VERSION" >> $GITHUB_OUTPUT
        echo "changed=$([[ "$CACHED_VERSION" != "$LATEST_VERSION" ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT

        # Log version info
        echo "Cached version: $CACHED_VERSION"
        echo "Latest version: $LATEST_VERSION"
        echo "Version changed: $([[ "$CACHED_VERSION" != "$LATEST_VERSION" ]] && echo "true" || echo "false")"

    - name: Checkout repository
      if: steps.version-check.outputs.changed == 'true' || inputs.force_build
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      if: steps.version-check.outputs.changed == 'true' || inputs.force_build
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      if: steps.version-check.outputs.changed == 'true' || inputs.force_build
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      if: steps.version-check.outputs.changed == 'true' || inputs.force_build
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/ultimate-rvc
        tags: |
          type=raw,value=latest
          type=raw,value=${{ steps.version-check.outputs.latest }}
        labels: |
          org.opencontainers.image.title=Ultimate RVC Docker
          org.opencontainers.image.description=Docker image for Ultimate RVC with version ${{ steps.version-check.outputs.latest }}
          org.opencontainers.image.source=https://github.com/vicyap/ultimate-rvc-docker
          org.opencontainers.image.version=${{ steps.version-check.outputs.latest }}

    - name: Build and push Docker image
      if: steps.version-check.outputs.changed == 'true' || inputs.force_build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        platforms: linux/amd64
        build-args: |
          ULTIMATE_RVC_VERSION=${{ steps.version-check.outputs.latest }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Summary
      if: always()
      run: |
        echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Cached Version:** ${{ steps.version-check.outputs.cached }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Latest Version:** ${{ steps.version-check.outputs.latest }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Version Changed:** ${{ steps.version-check.outputs.changed }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Force Build:** ${{ inputs.force_build || false }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ steps.version-check.outputs.changed }}" == "true" ]] || [[ "${{ inputs.force_build }}" == "true" ]]; then
          echo "✅ Docker image built and pushed to Docker Hub: ${{ secrets.DOCKER_USERNAME }}/ultimate-rvc" >> $GITHUB_STEP_SUMMARY
        else
          echo "ℹ️ No new version detected. Skipping build." >> $GITHUB_STEP_SUMMARY
        fi
